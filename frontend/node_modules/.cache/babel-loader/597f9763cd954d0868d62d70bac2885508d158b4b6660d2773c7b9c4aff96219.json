{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-root\\\\frontend\\\\src\\\\context\\\\NewsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from 'react';\n\n/**\r\n * NewsContext\r\n * \r\n * Этот модуль создает контекст для управления состоянием новостей в приложении.\r\n * \r\n * Взаимодействует с:\r\n * - React hooks (useState, useContext, useCallback)\r\n * - API сервисом для получения новостей (предполагается, что он реализован в отдельном модуле)\r\n * \r\n * Отвечает за:\r\n * - Хранение текущего состояния новостей\r\n * - Предоставление функций для получения, обновления и фильтрации новостей\r\n * - Обеспечение доступа к данным о новостях по всему приложению\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewsContext = /*#__PURE__*/createContext();\nexport const useNews = () => {\n  _s();\n  return useContext(NewsContext);\n};\n_s(useNews, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NewsProvider = ({\n  children\n}) => {\n  _s2();\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchNews = useCallback(async source => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Здесь должен быть вызов API для получения новостей\n      // const response = await api.fetchNews(source);\n      // setNews(response.data);\n      setNews([]); // Заглушка, замените на реальные данные\n    } catch (err) {\n      setError('Ошибка при загрузке новостей');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const updateNews = useCallback(updatedNews => {\n    setNews(prevNews => prevNews.map(news => news.id === updatedNews.id ? updatedNews : news));\n  }, []);\n  const filterNews = useCallback(criteria => {\n    // Реализация фильтрации новостей\n    // Пример: return news.filter(item => item.category === criteria.category);\n  }, [news]);\n  const value = {\n    news,\n    loading,\n    error,\n    fetchNews,\n    updateNews,\n    filterNews\n  };\n  return /*#__PURE__*/_jsxDEV(NewsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n};\n_s2(NewsProvider, \"3NX9MKxwTXI8oXnfzGeNPcjCU1E=\");\n_c = NewsProvider;\nexport default NewsContext;\nvar _c;\n$RefreshReg$(_c, \"NewsProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","jsxDEV","_jsxDEV","NewsContext","useNews","_s","NewsProvider","children","_s2","news","setNews","loading","setLoading","error","setError","fetchNews","source","err","console","updateNews","updatedNews","prevNews","map","id","filterNews","criteria","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/project-root/frontend/src/context/NewsContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from 'react';\r\n\r\n/**\r\n * NewsContext\r\n * \r\n * Этот модуль создает контекст для управления состоянием новостей в приложении.\r\n * \r\n * Взаимодействует с:\r\n * - React hooks (useState, useContext, useCallback)\r\n * - API сервисом для получения новостей (предполагается, что он реализован в отдельном модуле)\r\n * \r\n * Отвечает за:\r\n * - Хранение текущего состояния новостей\r\n * - Предоставление функций для получения, обновления и фильтрации новостей\r\n * - Обеспечение доступа к данным о новостях по всему приложению\r\n */\r\n\r\nconst NewsContext = createContext();\r\n\r\nexport const useNews = () => useContext(NewsContext);\r\n\r\nexport const NewsProvider = ({ children }) => {\r\n  const [news, setNews] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchNews = useCallback(async (source) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Здесь должен быть вызов API для получения новостей\r\n      // const response = await api.fetchNews(source);\r\n      // setNews(response.data);\r\n      setNews([]); // Заглушка, замените на реальные данные\r\n    } catch (err) {\r\n      setError('Ошибка при загрузке новостей');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const updateNews = useCallback((updatedNews) => {\r\n    setNews(prevNews => prevNews.map(news => \r\n      news.id === updatedNews.id ? updatedNews : news\r\n    ));\r\n  }, []);\r\n\r\n  const filterNews = useCallback((criteria) => {\r\n    // Реализация фильтрации новостей\r\n    // Пример: return news.filter(item => item.category === criteria.category);\r\n  }, [news]);\r\n\r\n  const value = {\r\n    news,\r\n    loading,\r\n    error,\r\n    fetchNews,\r\n    updateNews,\r\n    filterNews\r\n  };\r\n\r\n  return <NewsContext.Provider value={value}>{children}</NewsContext.Provider>;\r\n};\r\n\r\nexport default NewsContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,MAAA,IAAAC,OAAA;AAeA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMiB,SAAS,GAAGf,WAAW,CAAC,MAAOgB,MAAM,IAAK;IAC9CJ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF;MACA;MACA;MACAJ,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZH,QAAQ,CAAC,8BAA8B,CAAC;MACxCI,OAAO,CAACL,KAAK,CAACI,GAAG,CAAC;IACpB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,UAAU,GAAGnB,WAAW,CAAEoB,WAAW,IAAK;IAC9CV,OAAO,CAACW,QAAQ,IAAIA,QAAQ,CAACC,GAAG,CAACb,IAAI,IACnCA,IAAI,CAACc,EAAE,KAAKH,WAAW,CAACG,EAAE,GAAGH,WAAW,GAAGX,IAC7C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,UAAU,GAAGxB,WAAW,CAAEyB,QAAQ,IAAK;IAC3C;IACA;EAAA,CACD,EAAE,CAAChB,IAAI,CAAC,CAAC;EAEV,MAAMiB,KAAK,GAAG;IACZjB,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,SAAS;IACTI,UAAU;IACVK;EACF,CAAC;EAED,oBAAOtB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAAEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACvB,GAAA,CA1CWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA4CzB,eAAeH,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}